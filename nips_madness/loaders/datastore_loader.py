from pathlib import Path
import warnings

import numpy as np


def prepend_dtype(a, dtype_head):
    dtype = list(dtype_head)
    dtype.extend((a.dtype[i], a.dtype.names[i]) for i in range(len(a.dtype)))
    b = np.empty(len(a), dtype=dtype)
    for k in a.dtype.names:
        b[k] = a[k]
    return b


def has_csv_header(file):
    pos = file.tell()
    try:
        first = file.read(1024)  # 1024 should be large enough...
        try:
            float(first.split(',', 1)[0])
        except ValueError:
            return True
        else:
            return False
    finally:
        file.seek(pos)


class DataStoreLoader1(object):

    def __init__(self, directory):
        self.directory = Path(directory)

    def open(self, fname, *args, **kwargs):
        return open(str(self.directory.join(fname)), *args, **kwargs)

    def genfromtxt(self, fname, *args, **kwds):
        if hasattr(fname, 'read'):
            array = np.genfromtxt(fname, *args, **kwds)
        else:
            with self.open(fname) as file:
                array = np.genfromtxt(file, *args, **kwds)
        if array.ndim == 0:
            array = array.reshape(1)
        return array

    def load_csv(self, fname, *args, names=True, dtype=None, **kwds):
        return self.genfromtxt(fname, *args, delimiter=',', names=names,
                               dtype=dtype, **kwds)

    def load(self, name):
        try:
            loader = getattr(self, 'load_' + name)
        except AttributeError:
            return self.load_csv(name + '.csv')  # TODO: improve
        else:
            return loader()

    def load_TC_mean(self):
        with self.open('TC_mean.csv') as file:
            return np.loadtxt(file, delimiter=',')

    def load_tc_stats(self):
        raise NotImplementedError


class DataStoreLoader0(DataStoreLoader1):
    """ Loader for data generated by legacy GAN code. """

    def load_generator(self):
        with self.open('generator.csv') as file:
            names = has_csv_header(file)
            generator = self.load_csv(file, names=names)

        if len(generator.dtype) == 12:
            warnings.warn('generator.csv only contains 12 columns; '
                          'inserting index columns.')
            generator = prepend_dtype(generator, [('gen_step', int)])
            generator['gen_step'] = np.arange(len(generator))

        if names is None:
            warnings.warn('generator.csv has no header line; '
                          'assuming the default.')
            generator.dtype.names = ['gen_step',
                                     'J_EE', 'J_EI', 'J_IE', 'J_II',
                                     'D_EE', 'D_EI', 'D_IE', 'D_II',
                                     'S_EE', 'S_EI', 'S_IE', 'S_II']

        return generator

    def load_learning(self):
        with self.open('learning.csv') as file:
            names = has_csv_header(file)
            learning = self.load_csv(file, names=names)

        if names is None:
            warnings.warn('learning.csv has no header line; '
                          'assuming the default.')
            learning.dtype.names = [
                'gen_step', 'Gloss', 'Dloss', 'Daccuracy', 'SSsolve_time',
                'gradient_time', 'model_convergence', 'model_unused',
                'rate_penalty']

        return learning


datastore_loader_map = {
    0: DataStoreLoader0,
    1: DataStoreLoader1,
}


def get_datastore(path, info):
    data_version = info.get('extra_info', {}).get('data_version', 0)
    return datastore_loader_map[data_version](path)
